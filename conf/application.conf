# https://www.playframework.com/documentation/latest/Configuration
# This is the main configuration file for the application.
# ~~~~~

## Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off
}

akka {

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
play.http.secret.key="k2kbw:;QqkUisFV@oLM2XGI>L<P_j0iGqmPgeNZBuIe[Kz]MCl;S>[UBcx;Ofe?t"

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
play.modules.enabled += "modules.QuartzSchedulerModule"
play.modules.enabled += "modules.core.BaseModule"
play.modules.enabled += "modules.auth.CustomerModule"
play.modules.enabled += "modules.shopping.BaseModule"
play.modules.enabled += "modules.newsletter.BaseModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

auth {
  authToken.expiry=2 hours
}

silhouette {
  persistence.reactivemongo.collection.PasswordInfo = "customer-pwd-info-dao"

  # Authenticator settings
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  authenticator.httpOnlyCookie=true
  authenticator.useFingerprinting=false
  authenticator.authenticatorIdleTimeout=30 minutes
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.signer.key = "k2kbw:;QqkUisFV@oLM2XGI>L<P_j0iGqmPgeNZBuIe[Kz]MCl;S>[UBcx;Ofe?t"
  authenticator.crypter.key = "k2kbw:;QqkUisFV@oLM2XGI>L<P_j0iGqmPgeNZBuIe[Kz]MCl;S>[UBcx;Ofe?t"
}

## Internationalisation
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
play.i18n {
  # The application languages
  langs = [ "en", "it", "ar" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  requestHandler = "play.api.http.DefaultHttpRequestHandler"
  errorHandler = "utils.ErrorHandler"
  filters = "utils.Filters"
}

# The URL to the UI in dev mode
ui.dev.url = "http://localhost:3000"

## Filter Configuration
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.
#
play.filters {

  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.

  # Disabled filters remove elements from the enabled list.
  #disabled += filters.ExampleFilters

  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = [${ui.dev.url}]

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler

    bypassCorsTrustedOrigins = false
    cookie.name="PLAY_CSRF_TOKEN"
    contentType.blackList=[
      "application/x-www-form-urlencoded",
      "multipart/form-data",
      "text/plain",
      "application/json"
    ]
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    contentSecurityPolicy = null #FIX ME: Add correct content security policy dependign on your application. Defaul: "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    allowed = [${ui.dev.url}]
  }
}

# Play mailer
play.mailer {
host = "smtp.gmail.com"
port = 587
ssl = false
tls = true
tlsRequired = true
user = "email@gmail.com"
password = "password"
debug = true
timeout = 7000
connectiontimeout = 7000
mock = true
}

# MongoDB
mongodb.uri="mongodb://localhost:27017/mydb"
mongo-async-driver {
  akka {
    loglevel = DEBUG
  }
}

myapp.database-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    // should be same size as connection pool
    // see https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    // http://letitcrash.com/post/40755146949/tuning-dispatchers-in-akka-applications
    core-pool-size-min = 10 // minimumIdle
    core-pool-size-max = 10 // maximumPoolSize
 }
}

gateway.api.login.id="gatewayapiloginid"
gateway.transaction.key="gatewaytransactionkey"

# API prefix to be used for all API routes
apiPrefix = "api"
